(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{345:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("@[toc]")]),t._v(" "),a("h2",{attrs:{id:"需求场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需求场景"}},[t._v("#")]),t._v(" 需求场景")]),t._v(" "),a("p",[t._v("在前端开发领域，在日常的开发任务中，你是否遇到以下的需求：")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("ul",[a("li",[t._v("前端表单校验"),a("code",[t._v("手机号码")]),t._v("是否符合规则？")]),t._v(" "),a("li",[t._v("用户提交表单中的"),a("code",[t._v("身份证件号")]),t._v("是否符合大陆居民身份证规则？")]),t._v(" "),a("li",[t._v("如何提取字符串中出现的数字？")]),t._v(" "),a("li",[t._v("....等等等")])]),t._v(" "),a("p",[t._v("上述类似的需求我们在日常开发中，会遇到很多，JavaScript 为我们提供了一套解决方案，就是正则表达式，我们可以提取需要识别的目标的轮廓，用其构造一个正则表达式对象，通过方法来提取目标对象或者判断是否符合某些规则，下面就来具体说明正则表达式。")]),t._v(" "),a("h2",{attrs:{id:"正则表达式的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的定义"}},[t._v("#")]),t._v(" 正则表达式的定义")]),t._v(" "),a("p",[t._v("正则表达式是用于匹配字符串中的"),a("code",[t._v("字符组合的模式")]),t._v("。它是一个对象，这个对象可以被用于 RegExp(正则表达式）的"),a("code",[t._v("exec/test")]),t._v("和字符串的 "),a("code",[t._v("match/matchAll/replace/search/split")]),t._v("方法。")]),t._v(" "),a("h2",{attrs:{id:"创建正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式"}},[t._v("#")]),t._v(" 创建正则表达式")]),t._v(" "),a("p",[t._v("我们可以使用以下两种方法构建一个正则表达式：")]),t._v(" "),a("h3",{attrs:{id:"通过-表示式-创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-表示式-创建"}},[t._v("#")]),t._v(" 通过 / 表示式/ 创建")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab+c")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"通过构造函数创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过构造函数创建"}},[t._v("#")]),t._v(" 通过构造函数创建")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab+c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("当JavaScript语句加载后，正则表达式字面量就会被编译，当其保持不变时，使"),a("code",[t._v("用字面量创建方法，可以提高性能")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"编写一个正则表达式的模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写一个正则表达式的模式"}},[t._v("#")]),t._v(" 编写一个正则表达式的模式")]),t._v(" "),a("p",[t._v("一个正则表达式模式是由字符串构成的，这些字符串可以是数字、字母、特殊符号的组合。")]),t._v(" "),a("h3",{attrs:{id:"使用简单模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用简单模式"}},[t._v("#")]),t._v(" 使用简单模式")]),t._v(" "),a("p",[t._v("简单模式"),a("code",[t._v("直接使用目标字符串构成")]),t._v("，比如/abc/ 就是要找到出现abc的字符串，如果abc中间出现空格，那么这种简单的模式，就不能匹配，无法满足我们的需求，就需要用到下面带有"),a("code",[t._v("特殊字符的模式")]),t._v("，这些"),a("code",[t._v("特殊的字符在正则表示式中，有特别的含义")])]),t._v(" "),a("h3",{attrs:{id:"使用特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用特殊字符"}},[t._v("#")]),t._v(" 使用特殊字符")]),t._v(" "),a("p",[t._v("当我们需要匹配一个不太确定的字符串时，比如寻找一个或多个“a” ，或者寻找空格，可以在模式中使用特殊字符，比如使用"),a("code",[t._v("/ab*c/")]),t._v("去匹配单独的“a”后面跟了零个或多个“b”，同时后面跟着“c”的字符串，特殊字符"),a("code",[t._v("*")]),t._v("的含义是，前一项的字符出现零次或者多次。")]),t._v(" "),a("h3",{attrs:{id:"常用特殊字符列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用特殊字符列表"}},[t._v("#")]),t._v(" 常用特殊字符列表")]),t._v(" "),a("p",[t._v("下面的页面与表格列出了一个正则表达式中可以利用的特殊字符的完整列表和描述。")]),t._v(" "),a("h4",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\")]),t._v(" "),a("td",[t._v('（1）在非特殊字符之前的反斜杠表示下一个字符就是特殊字符，此字符不能按照字面理解，面。例如前面没有 "" 的 "b" 通常匹配小写字母 "b"，但如果前面出现\\，它则不会匹配任何字符，在特殊字符之前的反斜杠表示下一个字符不是特殊字符，能够转义')])]),t._v(" "),a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("表示匹配以下一个字符开始的字符串，例如，/^A/ 并不会匹配 \"an A\" 中的 'A'，但是会匹配 \"An E\" 中的 'A'。")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("表示匹配以上一个字符结尾的字符串，例如，/t$/ 并不会匹配 \"eater\" 中的 't'，但是会匹配 \"eat\" 中的 't'。")])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v('匹配一个表达式0次货多次，等价于{0，}，例如，/bo*/ 会匹配 "A ghost boooooed" 中的 \'booooo\' 和 "A bird warbled" 中的 \'b\'，但是在 "A goat grunted" 中不会匹配任何内容。')])]),t._v(" "),a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v('匹配前面表达式1次或者多次，等价于{1，}，例如，/a+/ 会匹配 "candy" 中的 \'a\' 和 "caaaaaaandy" 中所有的 \'a\'，但是在 "cndy" 中不会匹配任何内容。')])]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v('匹配前面表达式出现0次或1次，等价于{0,1}，例如，/e?le?/ 匹配 "angel" 中的 \'el\'、"angle" 中的 \'le\' 以及 "oslo\' 中的 \'l\'。如果这个符号紧跟着任何量词 *、 +、? 或 {} 的后面，则会使得量词变成非贪婪，和没有？符号使用的贪婪模式（匹配尽可能多的字符）正好相反 。例如，对 "123abc" 使用 /\\d+/ 将会匹配 "123"，而使用 /\\d+?/ 则只会匹配到 "1"。')])]),t._v(" "),a("tr",[a("td",[t._v(".")]),t._v(" "),a("td",[t._v("（小数点）默认匹配除换行符之外的任何单个字符。例如，/.n/ 将会匹配 \"nay, an apple is on the tree\" 中的 'an' 和 'on'，但是不会匹配 'nay'。")])])])]),t._v(" "),a("h4",{attrs:{id:"组和范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组和范围"}},[t._v("#")]),t._v(" 组和范围")]),t._v(" "),a("p",[t._v("下面这些组合，表示表达式字符的分组和范围")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("模式")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("(x)")]),t._v(" "),a("td",[t._v("像下面的例子展示的那样，它会匹配 'x' 并且记住匹配项。其中括号被称为捕获括号。"),a("code",[t._v("/(foo) (bar) \\1 \\2/")]),t._v("中的 '(foo)' 和 '(bar)' 匹配并记住字符串 \"foo bar foo bar\" 中前两个单词。模式中的"),a("code",[t._v("\\1 和 \\2")]),t._v(" 表示"),a("code",[t._v("第一个和第二个被捕获括号匹配的子字符串")]),t._v("，即 foo 和 bar，匹配了原字符串中的后两个单词。")])]),t._v(" "),a("tr",[a("td",[t._v("(?:x)")]),t._v(" "),a("td",[a("code",[t._v("匹配 'x' 但是不记住匹配项")]),t._v(",这种括号叫作"),a("code",[t._v("非捕获括号")]),t._v("，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子 /(?:foo){1,2}/,{1,2} 会"),a("code",[t._v("应用于整个 'foo' 单词")]),t._v(",如果表达式是"),a("code",[t._v("/foo{1,2}/")]),t._v("，{1,2} 将只应用于 'foo' 的"),a("code",[t._v("最后一个字符 'o'")])])]),t._v(" "),a("tr",[a("td",[t._v("x|y")]),t._v(" "),a("td",[t._v("匹配‘x’或者‘y’")])]),t._v(" "),a("tr",[a("td",[t._v("[xyz]")]),t._v(" "),a("td",[t._v('一个字符集合。匹配方括号中的任意字符，包括转义序列。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。例如，[abcd] 和 [a-d] 是一样的。他们都匹配"brisket"中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。')])]),t._v(" "),a("tr",[a("td",[t._v("{n}")]),t._v(" "),a("td",[t._v("n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。")])]),t._v(" "),a("tr",[a("td",[t._v("{n,}")]),t._v(" "),a("td",[t._v("n 是一个正整数，匹配前一个字符至少出现了 n 次。")])]),t._v(" "),a("tr",[a("td",[t._v("{n,m}")]),t._v(" "),a("td",[t._v("n 和 m 都是整数。匹配前面的字符至少 n 次，最多 m 次。如果 n 或者 m 的值是 0，这个值被忽略。")])]),t._v(" "),a("tr",[a("td",[t._v("[\\b]")]),t._v(" "),a("td",[t._v("匹配一个退格 (U+0008)。（不要和\\b混淆了。）")])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",[t._v("匹配一个词的边界。一个词的边界就是一个词"),a("code",[t._v("不被另外一个“字”字符跟随的位置或者前面")]),t._v("跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是 0。（不要和 [\\b] 混淆了）,例如使用\"moon例：/\\bm/匹配“moon”中的‘m’；/oo\\b/并不匹配\"moon\"中的'oo'，因为'oo'被一个“字”字符'n'紧跟着。/oon\\b/匹配\"moon\"中的'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。/\\w\\b\\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于 [\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。")])]),t._v(" "),a("tr",[a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("匹配一个非空白字符。")])]),t._v(" "),a("tr",[a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v("匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。")])]),t._v(" "),a("tr",[a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v("匹配一个非单字字符。等价于 [^A-Za-z0-9_]。")])]),t._v(" "),a("tr",[a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("匹配一个数字。等价于 [0-9]。")])]),t._v(" "),a("tr",[a("td",[t._v("[^xyz]")]),t._v(" "),a("td",[t._v("一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。")])]),t._v(" "),a("tr",[a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("匹配一个非数字字符。等价于 [^0-9]。")])])])]),t._v(" "),a("h2",{attrs:{id:"正则表达式使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式使用"}},[t._v("#")]),t._v(" 正则表达式使用")]),t._v(" "),a("p",[t._v("下面表格整理了 正则表达式搭配使用的方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("exec")]),t._v(" "),a("td",[t._v("在指定的字符串中寻找匹配正则表达式的元素的"),a("code",[t._v("RegExp 方法")]),t._v("，他返回"),a("code",[t._v("一个数组")]),t._v("，未匹配返回null")])]),t._v(" "),a("tr",[a("td",[t._v("test")]),t._v(" "),a("td",[t._v("返回在一个字符串中，是否存在符合正则表达式的子串的"),a("code",[t._v("RegExp 方法")]),t._v("，值是true或false")])]),t._v(" "),a("tr",[a("td",[t._v("match")]),t._v(" "),a("td",[t._v("一个在字符串中执行查找匹配的"),a("code",[t._v("String 方法")]),t._v("，它返回一个数组，在未匹配到时会返回 null。")])]),t._v(" "),a("tr",[a("td",[t._v("matchAll")]),t._v(" "),a("td",[t._v("一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。")])]),t._v(" "),a("tr",[a("td",[t._v("search")]),t._v(" "),a("td",[t._v("一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回 -1。")])]),t._v(" "),a("tr",[a("td",[t._v("replace")]),t._v(" "),a("td",[t._v("一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("split")]),t._v(" "),a("td",[t._v("一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。")])])])]),t._v(" "),a("p",[t._v("说明：\n如果想要知道某些字符串是否存在，你可以使用 test 或 search 方法。想得到更多的信息（但是比较慢）则可以使用 exec 或 match 方法")]),t._v(" "),a("h3",{attrs:{id:"代码演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码演示"}},[t._v("#")]),t._v(" 代码演示")]),t._v(" "),a("p",[t._v("在接下来的例子中，脚本将使用 exec 方法在一个字符串中查找一个匹配。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myRe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("d(b+)d")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myRe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cdbbdbsbz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("如果你不需要访问正则表达式的属性，这个脚本通过另一个方法来创建 myArray：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("d(b+)d")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cdbbdbsbz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 和 "cdbbdbsbz".match(/d(b+)d/g); 相似。')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 但是 "cdbbdbsbz".match(/d(b+)d/g) 输出数组 [ "dbbd" ]，')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 而 /d(b+)d/g.exec(\'cdbbdbsbz\') 输出数组 [ "dbbd", "bb", index: 1, input: "cdbbdbsbz" ].')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("如果你想通过一个字符串构建正则表达式，那么这个脚本还有另一种方法：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myRe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d(b+)d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myRe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cdbbdbsbz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("通过这些脚本，匹配成功后将返回一个数组并且更新正则表达式的属性，如下表所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/direct/fa2988f1d62a430f977b714a135c719d.png",alt:"在这里插入图片描述"}}),t._v("\n上述例子中，使用了g 这个高级标志，下列还有更多列举一下")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("标志")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("g")]),t._v(" "),a("td",[t._v("全局检索，从开头到结尾匹配，而不是一匹配就结束")])]),t._v(" "),a("tr",[a("td",[t._v("m")]),t._v(" "),a("td",[t._v("多行检索")])]),t._v(" "),a("tr",[a("td",[t._v("i")]),t._v(" "),a("td",[t._v("不区分大小写")])])])]),t._v(" "),a("p",[t._v("为了在正则表达式中包含标志，请使用以下语法：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pattern"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"flags"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("或者")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("例如，re = /\\w+\\s/g 将创建一个查找一个或多个字符后有一个空格的正则表达式，或者组合起来像此要求的字符串。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\w+\\s")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fee fi fo fum"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["fee ", "fi ", "fo "]')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"常用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用示例"}},[t._v("#")]),t._v(" 常用示例")]),t._v(" "),a("h3",{attrs:{id:"验证手机号码合法性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证手机号码合法性"}},[t._v("#")]),t._v(" 验证手机号码合法性")]),t._v(" "),a("p",[t._v("验证手机号码 形如 ："),a("code",[t._v("136-2119-9812")]),t._v(" ,"),a("code",[t._v("136/2119/9812")]),t._v(","),a("code",[t._v("136.2119.9812")]),t._v(","),a("code",[t._v("13621199812")]),t._v(" 格式。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?:\\d{3}|\\(\\d{3}\\))([-\\/\\.]{0,1})\\d{4}\\1\\d{4}")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("phoneInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phoneInput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            phoneInput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" isn\'t a phone number with area code!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thanks, your phone number is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("上面代码，通过字面量创建一个正则表达式，\n"),a("code",[t._v("(?:")]),t._v("这个正则表达式寻找三个数字字符 "),a("code",[t._v("\\d{3}")]),t._v(", 或者 "),a("code",[t._v("|")]),t._v("一个左半括号 "),a("code",[t._v("\\(")]),t._v("跟着三位数字 "),a("code",[t._v("\\d{3}")]),t._v(", 跟着一个封闭括号"),a("code",[t._v("\\)")]),t._v(", (结束非捕获括号 ))。表示前面三个是数字。")]),t._v(" "),a("p",[t._v("后跟着一个"),a("code",[t._v("短破折号或正斜杠或小数点")]),t._v("，随后跟随4个数字字符，当记忆字符 "),a("code",[t._v("([-\\/\\.])")]),t._v(" 捕获并记住，里面字符可以出现0次或一次，后面跟着四位小数 \\d{4}，再后面跟随记住的破折号、正斜杠或小数点 \\1，最后跟着四位小数 \\d{4}。")]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("ul",[a("li",[t._v("正则表达式中属于 RegExp 方法有 exec、test，其中exec 返回匹配的数组（可以是多个），所以0是"),a("code",[t._v("最长的匹配子串")]),t._v("，test返回的是"),a("code",[t._v("布尔值")]),t._v("。")]),t._v(" "),a("li",[t._v("match 和matchAll 、search、replace和split 属于字符串的方法。")]),t._v(" "),a("li",[t._v("match 返回也是数组，但"),a("code",[t._v("只有一个元素，最长的子串")])]),t._v(" "),a("li",[t._v("matchAll "),a("code",[t._v("返回一个迭代器")]),t._v("，查找所有匹配的子串")])])])}),[],!1,null,null,null);a.default=r.exports}}]);